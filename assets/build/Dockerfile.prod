# ---------------------------------------------
# STAGE 1: Build & install dependencies
# ---------------------------------------------
FROM python:3.13-alpine AS builder

# 1) install only build-time deps
RUN apk add --no-cache --virtual .build-deps \
        gcc \
        musl-dev \
        python3-dev

WORKDIR /app

# 2) copy & install Python reqs into a venv
COPY assets/build/requirements.prod.txt .
RUN python -m venv /opt/venv \
    && /opt/venv/bin/pip install --no-cache-dir --upgrade pip \
    && /opt/venv/bin/pip install --no-cache-dir -r requirements.prod.txt \
    \
    # 3) purge build deps and clean pip cache
    && apk del .build-deps \
    && /opt/venv/bin/pip cache purge \
    \
    # 4) strip out bytecode & __pycache__ dirs
    && find /opt/venv -type d -name "__pycache__" -exec rm -rf {} + \
    && find /opt/venv -name "*.py[co]" -delete

# ---------------------------------------------
# STAGE 2: Final runtime image
# ---------------------------------------------
FROM python:3.13-alpine

# 1) only runtime deps (curl here because you wanted it)
RUN apk add --no-cache curl

# 2) bring in a clean venv
COPY --from=builder /opt/venv /opt/venv

# 3) minimal environment setup
ENV PATH="/opt/venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

WORKDIR /app
    
# Copy only necessary files from builder and dev stages
COPY --from=builder /opt/venv /opt/venv
COPY app.py /app/app.py
COPY /src /app/src

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH"

# Expose port
EXPOSE 80

# Run the application
CMD ["python", "/app/app.py"]